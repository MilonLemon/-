#include "stdafx.h"
#include <iostream>

using namespace std;
struct Node
{
	int x;
	Node *Next;
};

class List
{
	Node *Head, *Tail;
public:
	List() :Head(NULL), Tail(NULL) {};
	~List();
	void Search(int x);
	void Add(int y, int x);
	void Delete(int x);
	void Show();
};


List::~List()
{
	while (Head)
	{
		Tail = Head->Next;
		delete Head;
		Head = Tail;
	}
}

void List::Add(int y, int x)
{
	Node *temp = Head;
	Node *temp_2 = new Node;
	Node *temp_3;
	Node *temp_1;
	temp_2->x = x;
	int m = y;
	int n = 0;

	if (Head != NULL) {

		if (m != 1) {

			int i = 1;

			while (i < (m - 1)) {
				temp = temp->Next;
				i++;
			}

			if (temp->Next != NULL) {

				temp_3 = temp->Next;
				temp_1 = temp;
				temp->Next = temp_2;

				temp = temp->Next;
				temp->Next = temp_3;

				temp = temp->Next;

				temp = Head;
			}

			if (temp->Next == NULL) {
				temp_3 = temp;
				temp->Next = temp_2;;
				temp = temp->Next;
				temp->Next = NULL;
				Tail = temp;
			}

		}

		if (m == 1) {
			temp_2->Next = temp;
			Head = temp_2;
		}
	}

	if (Head == NULL) {
		temp_2->Next = NULL;
		Head = Tail = temp_2;

	}
}

void List::Search(int x)
{
	Node *temp = Head;

	while (temp != NULL) {

		if (temp->x == x) {
			cout << "I Found You ";
			break;
		}
		else if (temp->x != x) {
			cout << temp->x << " ";
			temp = temp->Next;
		}
	}

	cout << "\n";
}

void List::Show()
{
	cout << "\n";

	Node *temp = Tail;

	temp = Head;
	while (temp != NULL)
	{
		cout << temp->x << " ";
		temp = temp->Next;
	}

	cout << "\n";
}

void List::Delete(int x) {

	int m = x;
	int n = 0;
	Node *temp = Head;
	Node *temp_2 = 0;
	Node *temp_3 = 0;

	while (temp != NULL) {
		n++;

		if (n == m - 1) {
			temp_3 = temp;
		}


		if (n == m && temp->Next != NULL && temp != Head) {
			temp_2 = temp->Next;
			delete temp;
			temp = temp_3;
			temp->Next = temp_2;
		}

		else if (n == m && temp->Next == NULL && temp != Head) {
			Tail = temp_3;
			delete temp;
			temp = Tail;
			temp->Next = NULL;
		}

		else if (n == m && temp->Next != NULL && temp == Head) {
			Head = temp->Next;
			delete temp;
			temp = Head;
		}

		temp = temp->Next;
	}

}

int main(void) {

	setlocale(LC_ALL, "Russian");

	List lst;

	for (;;) {

		int c;
		cout << "Какое действие выполнить?\n";
		cout << "1) Вставка нового элемента с заданным номером\n";
		cout << "2) Удаление элемента с заданным номером\n";
		cout << "3) Поиск элемента в списке\n";
		cin >> c;

		switch (c) {

		case 1: {

			int n, m;
			cout << "Введите номер элементa:\n";
			cin >> n;
			cout << "Введите элемент:\n";
			cin >> m;
			lst.Add(n, m);
			lst.Show();

			break;
		}

		case 2: {

			int n;
			cout << "Введите номер элементa, который нужно удалить:\n";
			cin >> n;
			lst.Delete(n);
			lst.Show();

			break;
		}

		case 3: {

			int n;
			cout << "Введите элемент, который нужно найти:\n";
			cin >> n;
			lst.Search(n);

			break;
		}

		default: {

			cout << "Ошибка\n";
			break;
		}

		}

	}

	system("pause");

}
